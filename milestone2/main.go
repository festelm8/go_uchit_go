package main

import (
    "fmt"
    "os"
    "io/ioutil"
    "encoding/json"
    "strconv"
    "go_uchit_go/milestone2/bitch"
)

type Users struct {
	Users []User `json:"users"`
}

type AutoGenerated struct {
	Users []User `json:"users"`
}

type User struct {
    Name   string `json:"name"`
    Type   string `json:"type"`
    Age    int    `json:"age"`
    Social Social `json:"social"`
}

type Social struct {
    Facebook string `json:"facebook"`
    Twitter  string `json:"twitter"`
}

func main() {
    xs := []float64{1,2,3,4}
    avg := bitch.Average(xs) //наша либа из пакет bitch
    fmt.Println(avg)

    jsonFile, err := os.Open("users.json")
    if err != nil {
        fmt.Println(err)
    }
    fmt.Println("Successfully Opened users.json")
    defer jsonFile.Close()

    byteValue, _ := ioutil.ReadAll(jsonFile)

	//var result map[string]interface{} //структура простокого ассоц массива для чека
	//json.Unmarshal([]byte(byteValue), &result)
	//fmt.Println(result["users"])

    var users Users  //юзаем полноценно описанную структуру
	json.Unmarshal(byteValue, &users)
	for i := 0; i < len(users.Users); i++ {
		fmt.Println("User Type: " + users.Users[i].Type)
		fmt.Println("User Age: " + strconv.Itoa(users.Users[i].Age))
		fmt.Println("User Name: " + users.Users[i].Name)
		fmt.Println("Facebook Url: " + users.Users[i].Social.Facebook)
	}
}